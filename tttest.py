# -*- coding: utf-8 -*-
# code : chen mo   time : 2023-12-19
#
# Form implementation generated from reading ui file 'tttest.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sys
import math
import commpy
import commpy as cpy
import numpy
import numpy as np
from PIL import Image
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog
from matplotlib import pyplot as plt

import resource_rc


def dual_rayleigh_channel(symbols, snr_dB, seed=7):
    # 生成瑞利衰落信道的复数系数
    np.random.seed(seed)  # 设置随机种子，确保了每次调用该函数时，都会生成相同的随机数序列
    h1 = (np.random.randn() + 1j * np.random.randn()) / np.sqrt(2)  # 复高斯法
    h2 = (np.random.randn() + 1j * np.random.randn()) / np.sqrt(2)

    # 信号通过两个通道传输
    received_symbols = h1 * symbols + h2 * symbols

    # 添加高斯噪声
    noise_power = 10 ** (-snr_dB / 10)
    noise = np.sqrt(noise_power / 2) * (np.random.randn(len(symbols)) + 1j * np.random.randn(len(symbols)))

    # 接收端信号加上噪声
    received_symbols += noise

    return received_symbols


# 计算误比特率
def calculate_ber(original_bits, received_bits):
    errors = sum(original_bit != received_bit for original_bit, received_bit in zip(original_bits, received_bits))
    ber = errors / len(original_bits)
    return ber


def awgn(x, snr, seed=7):
    '''
    加入高斯白噪声 Additive White Gaussian Noise
    :param x: 原始信号
    :param snr: 信噪比
    :return: 加入噪声后的信号
    '''
    np.random.seed(seed)  # 设置随机种子，确保了每次调用该函数时，都会生成相同的随机数序列
    snr = 10 ** (snr / 10.0)
    xpower = np.sum(x ** 2) / len(x)
    npower = xpower / snr
    noise = np.random.randn(len(x)) * np.sqrt(npower)
    return x + noise


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(673, 505)
        font = QtGui.QFont()
        font.setPointSize(9)
        MainWindow.setFont(font)
        MainWindow.setStyleSheet("background-image: url(:/pic/backgroung.jpg);")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.centralwidget.setFont(font)
        self.centralwidget.setObjectName("centralwidget")
        self.label_image1 = QtWidgets.QLabel(self.centralwidget)
        self.label_image1.setGeometry(QtCore.QRect(20, 80, 191, 171))
        self.label_image1.setFrameShape(QtWidgets.QFrame.Box)
        self.label_image1.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.label_image1.setText("")
        self.label_image1.setObjectName("label_image1")
        self.pushButton_open = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_open.setGeometry(QtCore.QRect(30, 380, 171, 21))
        self.pushButton_open.setObjectName("pushButton_open")
        self.label_title = QtWidgets.QLabel(self.centralwidget)
        self.label_title.setGeometry(QtCore.QRect(10, 0, 291, 41))
        font = QtGui.QFont()
        font.setFamily("微软雅黑 Light")
        font.setPointSize(15)
        self.label_title.setFont(font)
        self.label_title.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.label_title.setFrameShadow(QtWidgets.QFrame.Plain)
        self.label_title.setObjectName("label_title")
        self.label_image2 = QtWidgets.QLabel(self.centralwidget)
        self.label_image2.setGeometry(QtCore.QRect(240, 80, 191, 171))
        self.label_image2.setFrameShape(QtWidgets.QFrame.Box)
        self.label_image2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.label_image2.setText("")
        self.label_image2.setObjectName("label_image2")
        self.label_image3 = QtWidgets.QLabel(self.centralwidget)
        self.label_image3.setGeometry(QtCore.QRect(240, 290, 191, 171))
        self.label_image3.setFrameShape(QtWidgets.QFrame.Box)
        self.label_image3.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.label_image3.setText("")
        self.label_image3.setObjectName("label_image3")
        self.label_image4 = QtWidgets.QLabel(self.centralwidget)
        self.label_image4.setGeometry(QtCore.QRect(460, 80, 191, 171))
        self.label_image4.setFrameShape(QtWidgets.QFrame.Box)
        self.label_image4.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.label_image4.setText("")
        self.label_image4.setObjectName("label_image4")
        self.pushButton_go = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_go.setGeometry(QtCore.QRect(30, 410, 171, 21))
        self.pushButton_go.setObjectName("pushButton_go")
        self.pushButton_none = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_none.setGeometry(QtCore.QRect(30, 440, 171, 21))
        self.pushButton_none.setObjectName("pushButton_none")
        self.label_kind1 = QtWidgets.QLabel(self.centralwidget)
        self.label_kind1.setGeometry(QtCore.QRect(30, 290, 61, 21))
        self.label_kind1.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.label_kind1.setObjectName("label_kind1")
        self.comboBox = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox.setGeometry(QtCore.QRect(90, 290, 111, 22))
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.checkBox = QtWidgets.QCheckBox(self.centralwidget)
        self.checkBox.setGeometry(QtCore.QRect(30, 350, 171, 21))
        self.checkBox.setObjectName("checkBox")
        self.label_title1 = QtWidgets.QLabel(self.centralwidget)
        self.label_title1.setGeometry(QtCore.QRect(20, 50, 71, 21))
        font = QtGui.QFont()
        font.setFamily("微软雅黑 Light")
        font.setPointSize(11)
        font.setBold(False)
        font.setItalic(False)
        font.setUnderline(False)
        font.setWeight(50)
        self.label_title1.setFont(font)
        self.label_title1.setObjectName("label_title1")
        self.label_title2 = QtWidgets.QLabel(self.centralwidget)
        self.label_title2.setGeometry(QtCore.QRect(240, 50, 81, 21))
        font = QtGui.QFont()
        font.setFamily("微软雅黑 Light")
        font.setPointSize(11)
        font.setBold(False)
        font.setItalic(False)
        font.setUnderline(False)
        font.setWeight(50)
        self.label_title2.setFont(font)
        self.label_title2.setObjectName("label_title2")
        self.label_title4 = QtWidgets.QLabel(self.centralwidget)
        self.label_title4.setGeometry(QtCore.QRect(460, 50, 111, 21))
        font = QtGui.QFont()
        font.setFamily("微软雅黑 Light")
        font.setPointSize(11)
        font.setBold(False)
        font.setItalic(False)
        font.setUnderline(False)
        font.setWeight(50)
        self.label_title4.setFont(font)
        self.label_title4.setObjectName("label_title4")
        self.label_title3 = QtWidgets.QLabel(self.centralwidget)
        self.label_title3.setGeometry(QtCore.QRect(240, 260, 81, 21))
        font = QtGui.QFont()
        font.setFamily("微软雅黑 Light")
        font.setPointSize(11)
        font.setBold(False)
        font.setItalic(False)
        font.setUnderline(False)
        font.setWeight(50)
        self.label_title3.setFont(font)
        self.label_title3.setObjectName("label_title3")
        self.label_image5 = QtWidgets.QLabel(self.centralwidget)
        self.label_image5.setGeometry(QtCore.QRect(460, 290, 191, 171))
        self.label_image5.setFrameShape(QtWidgets.QFrame.Box)
        self.label_image5.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.label_image5.setText("")
        self.label_image5.setObjectName("label_image5")
        self.label_title5 = QtWidgets.QLabel(self.centralwidget)
        self.label_title5.setGeometry(QtCore.QRect(460, 260, 51, 21))
        font = QtGui.QFont()
        font.setFamily("微软雅黑 Light")
        font.setPointSize(11)
        font.setBold(False)
        font.setItalic(False)
        font.setUnderline(False)
        font.setWeight(50)
        self.label_title5.setFont(font)
        self.label_title5.setObjectName("label_title5")
        self.label_setting = QtWidgets.QLabel(self.centralwidget)
        self.label_setting.setGeometry(QtCore.QRect(20, 260, 81, 21))
        font = QtGui.QFont()
        font.setFamily("微软雅黑 Light")
        font.setPointSize(11)
        font.setBold(False)
        font.setItalic(False)
        font.setUnderline(False)
        font.setWeight(50)
        self.label_setting.setFont(font)
        self.label_setting.setObjectName("label_setting")
        self.label_kind2 = QtWidgets.QLabel(self.centralwidget)
        self.label_kind2.setGeometry(QtCore.QRect(30, 320, 61, 21))
        self.label_kind2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.label_kind2.setObjectName("label_kind2")
        self.comboBox_2 = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox_2.setGeometry(QtCore.QRect(90, 320, 111, 22))
        self.comboBox_2.setObjectName("comboBox_2")
        self.comboBox_2.addItem("")
        self.comboBox_2.addItem("")
        self.comboBox_2.addItem("")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 673, 22))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.pushButton_none.clicked.connect(MainWindow.close)  # type: ignore
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # 链接用法
        self.pushButton_open.clicked.connect(self.openImage)
        self.pushButton_go.clicked.connect(self.go)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButton_open.setText(_translate("MainWindow", "上传"))
        self.label_title.setText(_translate("MainWindow", "基于python的图像传输系统"))
        self.pushButton_go.setText(_translate("MainWindow", "传输"))
        self.pushButton_none.setText(_translate("MainWindow", "放松按键"))
        self.label_kind1.setText(_translate("MainWindow", "调制方式"))
        self.comboBox.setItemText(0, _translate("MainWindow", "2PSK"))
        self.comboBox.setItemText(1, _translate("MainWindow", "4PSK"))
        self.comboBox.setItemText(2, _translate("MainWindow", "8PSK"))
        self.checkBox.setText(_translate("MainWindow", "请问今天是否开心"))
        self.label_title1.setText(_translate("MainWindow", "原始图像"))
        self.label_title2.setText(_translate("MainWindow", "调整前图像"))
        self.label_title4.setText(_translate("MainWindow", "系统误码率曲线"))
        self.label_title3.setText(_translate("MainWindow", "调整后图像"))
        self.label_title5.setText(_translate("MainWindow", "星座图"))
        self.label_setting.setText(_translate("MainWindow", "参数设置区"))
        self.label_kind2.setText(_translate("MainWindow", "传输信道"))
        self.comboBox_2.setItemText(0, _translate("MainWindow", "理想信道"))
        self.comboBox_2.setItemText(1, _translate("MainWindow", "AWGN信道"))
        self.comboBox_2.setItemText(2, _translate("MainWindow", "平坦Rayleigh衰落信道"))

    def openImage(self):  # 选择本地图片上传
        global imgName  # 这里为了方便别的地方引用图片路径，我们把它设置为全局变量
        imgName, imgType = QFileDialog.getOpenFileName(self.centralwidget, "打开图片", "",
                                                       "*.jpg;;*.png;;All Files(*)")  # 弹出一个文件选择框，第一个返回值imgName记录选中的文件路径+文件名，第二个返回值imgType记录文件的类型
        jpg = QtGui.QPixmap(imgName).scaled(self.label_image1.width(),
                                            self.label_image1.height())  # 通过文件路径获取图片文件，并设置图片长宽为label控件的长宽
        self.label_image1.setPixmap(jpg)  # 在label控件上显示选择的图片
        print(imgName)  # 测试

    def go(self):
        # 读取图像并转换为numpy数组
        image = Image.open(imgName)
        image_array = np.array(image)
        # print(image_array)
        # 将图像数据转换为二进制比特流
        bit_data = np.unpackbits(image_array).tolist()
        # 测试点
        print('原始信号', bit_data)
        # 获取调制方式
        var = self.comboBox.currentText()
        if var == "2PSK":
            # 创建2PSK调制器
            modulator = cpy.PSKModem(2)
            modulated_data = modulator.modulate(bit_data)
            # 2PSK调制信号测试点
            print('2PSK调制信号', modulated_data)
            print(numpy.real(modulated_data))
            print(numpy.imag(modulated_data))

            # 绘制星座图
            modulated_data_real = numpy.real(modulated_data)
            modulated_data_imag = numpy.imag(modulated_data)
            plt.scatter(modulated_data_real, modulated_data_imag, c='r', marker='*', s=50)
            plt.xticks(range(-2, 3, 1))
            plt.yticks(range(-2, 3, 1))
            plt.savefig("planet.jpg")

            # 通过文件路径获取图片文件，并设置图片长宽为label控件的长宽
            jpg = QtGui.QPixmap('planet.jpg').scaled(self.label_image5.width(),
                                                     self.label_image5.height())
            # 在label控件上显示选择的图片
            self.label_image5.setPixmap(jpg)

            # 信道及解调
            var2 = self.comboBox_2.currentText()
            if var2 == "AWGN信道":
                received_data = awgn(modulated_data, 5)
                # 创建2PSK解调器并解调信号
                demodulator = cpy.PSKModem(2)
                demodulated_data = demodulator.demodulate(received_data, 'hard')
                # 将解调后的比特流转换回数组图像数据
                demodulated_image_array = np.packbits(demodulated_data).astype(np.uint8)
                # 2PSK解调信号测试点
                # print('2PSK解调信号', demodulated_data)

                # 计算实际误比特率和绘图保存显示
                ber_sj = []
                for i in range(-10, 5):
                    received_data = awgn(modulated_data, i)  # snr:i
                    demodulated_data = demodulator.demodulate(received_data, 'hard')
                    ber_sj += [calculate_ber(bit_data, demodulated_data)]
                # 理想误比特率计算
                snr_db = np.array([i for i in range(-10, 5)])
                snr_en = 10 ** (snr_db / 10)
                k = np.sqrt(snr_en) * math.sin(math.pi / 2)
                ber_lx = [math.erfc(i) for i in k]
                fig, ax = plt.subplots()  # 创建图实例
                ax.plot(snr_db, ber_lx, label='li xiang')  # 作1
                ax.plot(snr_db, ber_sj, label='shi ji')  # 作2
                ax.set_xlabel('SNR')  # 设置x轴名称 x label
                ax.set_yscale("log")
                ax.set_ylabel('BER')  # 设置y轴名称 y label
                ax.set_title('BER ver SNR')  # 设置图名为Simple Plot
                ax.legend()  # 自动检测要在图例中显示的元素，并且显示
                plt.savefig("BERverSNR.jpg")

                # 通过文件路径获取图片文件，并设置图片长宽为label控件的长宽
                jpg = QtGui.QPixmap('BERverSNR.jpg').scaled(self.label_image4.width(),
                                                            self.label_image4.height())
                # 在label控件上显示选择的图片
                self.label_image4.setPixmap(jpg)


            elif var2 == "平坦Rayleigh衰落信道":
                # 生成瑞利信道
                snr_db = 5
                received_data = dual_rayleigh_channel(modulated_data, snr_db)
                print(received_data)
                # 信道估计及调整图像
                channel_h = received_data / modulated_data
                received_data_change = received_data / channel_h
                print(received_data_change)
                demodulator = cpy.PSKModem(2)
                demodulated_data_change = demodulator.demodulate(received_data_change, 'hard')
                demodulated_image_array_change = np.packbits(demodulated_data_change).astype(np.uint8)
                image_height, image_width = image.size
                demodulated_image_array_change.resize((image_width, image_height, 3))
                demodulated_image_change = Image.fromarray(demodulated_image_array_change)
                demodulated_image_change.save('2psk_change.jpg')
                jpg = QtGui.QPixmap('2psk_change.jpg').scaled(self.label_image3.width(),
                                                       self.label_image3.height())
                self.label_image3.setPixmap(jpg)

                # 创建2PSK解调器并解调信号
                demodulator = cpy.PSKModem(2)
                demodulated_data = demodulator.demodulate(received_data, 'hard')
                # 将解调后的比特流转换回数组图像数据
                demodulated_image_array = np.packbits(demodulated_data).astype(np.uint8)
                # 2PSK解调信号测试点
                # print('2PSK解调信号', demodulated_data)

                # 计算实际误比特率和绘图保存显示
                ber_sj = []
                for i in range(-10, 5):
                    received_data = dual_rayleigh_channel(modulated_data, i)
                    demodulated_data = demodulator.demodulate(received_data, 'hard')
                    ber_sj += [calculate_ber(bit_data, demodulated_data)]
                # 理想误比特率计算
                snr_db = np.array([i for i in range(-10, 5)])
                snr_en = 10 ** (snr_db / 10)
                k = np.sqrt(snr_en) * math.sin(math.pi / 2)
                ber_lx = [math.erfc(i) for i in k]
                fig, ax = plt.subplots()  # 创建图实例
                ax.plot(snr_db, ber_lx, label='li xiang')  # 作1
                ax.plot(snr_db, ber_sj, label='shi ji')  # 作2
                ax.set_xlabel('SNR')  # 设置x轴名称 x label
                ax.set_yscale("log")
                ax.set_ylabel('BER')  # 设置y轴名称 y label
                ax.set_title('BER ver SNR')  # 设置图名为Simple Plot
                ax.legend()  # 自动检测要在图例中显示的元素，并且显示
                plt.savefig("BERverSNR.jpg")

                # 通过文件路径获取图片文件，并设置图片长宽为label控件的长宽
                jpg = QtGui.QPixmap('BERverSNR.jpg').scaled(self.label_image4.width(),
                                                            self.label_image4.height())
                # 在label控件上显示选择的图片
                self.label_image4.setPixmap(jpg)
            else:
                received_data = modulated_data
                # 创建2PSK解调器并解调信号
                demodulator = cpy.PSKModem(2)
                demodulated_data = demodulator.demodulate(received_data, 'hard')
                # 将解调后的比特流转换回数组图像数据
                demodulated_image_array = np.packbits(demodulated_data).astype(np.uint8)
                # 2PSK解调信号测试点
                # print('2PSK解调信号', demodulated_data)

            # 重构维度
            image_height, image_width = image.size
            demodulated_image_array.resize((image_width, image_height, 3))
            # 重构的数组转换回图像数据
            demodulated_image = Image.fromarray(demodulated_image_array)
            # 测试点
            # print(demodulated_image_array)
            print('原始图像尺寸', image.size)  # 原始图像尺寸
            print('重构图像尺寸', demodulated_image.size)  # 重构图像尺寸

            # 保存图像
            demodulated_image.save('2psk.jpg')

            # 通过文件路径获取图片文件，并设置图片长宽为label控件的长宽
            jpg = QtGui.QPixmap('2psk.jpg').scaled(self.label_image2.width(),
                                                   self.label_image2.height())
            # 在label控件上显示选择的图片
            self.label_image2.setPixmap(jpg)

        elif var == "4PSK":
            # 创建4PSK调制器
            modulator = cpy.PSKModem(4)
            modulated_data = modulator.modulate(bit_data)
            # 4PSK调制信号测试点
            print('4PSK调制信号', modulated_data)

            # 绘制星座图
            modulated_data_real = numpy.real(modulated_data)
            modulated_data_imag = numpy.imag(modulated_data)
            plt.scatter(modulated_data_real, modulated_data_imag, c='r', marker='*', s=50)
            plt.xticks(range(-2, 3, 1))
            plt.yticks(range(-2, 3, 1))
            plt.savefig("planet.jpg")
            # 通过文件路径获取图片文件，并设置图片长宽为label控件的长宽
            jpg = QtGui.QPixmap('planet.jpg').scaled(self.label_image5.width(),
                                                     self.label_image5.height())
            # 在label控件上显示选择的图片
            self.label_image5.setPixmap(jpg)

            # 信道
            var2 = self.comboBox_2.currentText()
            if var2 == "AWGN信道":
                received_data = awgn(modulated_data, 5)
                # 创建4PSK解调器并解调信号
                demodulator = cpy.PSKModem(4)
                demodulated_data = demodulator.demodulate(received_data, 'hard')
                # 将解调后的比特流转换回数组图像数据
                demodulated_image_array = np.packbits(demodulated_data).astype(np.uint8)
                # 4PSK解调信号测试点
                # print('4PSK解调信号', demodulated_data)

                # 计算实际误比特率和绘图保存显示
                ber_sj = []
                for i in range(-10, 5):
                    received_data = awgn(modulated_data, i)  # snr:i
                    demodulated_data = demodulator.demodulate(received_data, 'hard')
                    ber_sj += [calculate_ber(bit_data, demodulated_data)]
                print(ber_sj)
                # 理想误比特率计算
                snr_db = np.array([i for i in range(-10, 5)])
                snr_en = 10 ** (snr_db / 10)
                k = np.sqrt(snr_en) * math.sin(math.pi / 4)
                ber_lx = [math.erfc(i) for i in k]
                fig, ax = plt.subplots()  # 创建图实例
                ax.plot(snr_db, ber_lx, label='li xiang')  # 作1
                ax.plot(snr_db, ber_sj, label='shi ji')  # 作2
                ax.set_xlabel('SNR')  # 设置x轴名称 x label
                ax.set_yscale("log")
                ax.set_ylabel('BER')  # 设置y轴名称 y label
                ax.set_title('BER ver SNR')  # 设置图名为Simple Plot
                ax.legend()  # 自动检测要在图例中显示的元素，并且显示
                plt.savefig("BERverSNR.jpg")

                # 通过文件路径获取图片文件，并设置图片长宽为label控件的长宽
                jpg = QtGui.QPixmap('BERverSNR.jpg').scaled(self.label_image4.width(),
                                                            self.label_image4.height())
                # 在label控件上显示选择的图片
                self.label_image4.setPixmap(jpg)


            elif var2 == "平坦Rayleigh衰落信道":
                # 生成瑞利信道
                snr_db = 5
                received_data = dual_rayleigh_channel(modulated_data, snr_db)
                print(received_data)
                # 信道估计及调整图像
                channel_h = received_data / modulated_data
                received_data_change = received_data / channel_h
                print(received_data_change)
                demodulator = cpy.PSKModem(4)
                demodulated_data_change = demodulator.demodulate(received_data_change, 'hard')
                demodulated_image_array_change = np.packbits(demodulated_data_change).astype(np.uint8)
                image_height, image_width = image.size
                demodulated_image_array_change.resize((image_width, image_height, 3))
                demodulated_image_change = Image.fromarray(demodulated_image_array_change)
                demodulated_image_change.save('4psk_change.jpg')
                jpg = QtGui.QPixmap('4psk_change.jpg').scaled(self.label_image3.width(),
                                                              self.label_image3.height())
                self.label_image3.setPixmap(jpg)

                # 创建4PSK解调器并解调信号
                demodulator = cpy.PSKModem(4)
                demodulated_data = demodulator.demodulate(received_data, 'hard')
                # 将解调后的比特流转换回数组图像数据
                demodulated_image_array = np.packbits(demodulated_data).astype(np.uint8)
                # 4PSK解调信号测试点
                # print('4PSK解调信号', demodulated_data)

                # 计算实际误比特率和绘图保存显示
                ber_sj = []
                for i in range(-10, 5):
                    received_data = dual_rayleigh_channel(modulated_data, i)
                    demodulated_data = demodulator.demodulate(received_data, 'hard')
                    ber_sj += [calculate_ber(bit_data, demodulated_data)]
                # 理想误比特率计算
                snr_db = np.array([i for i in range(-10, 5)])
                snr_en = 10 ** (snr_db / 10)
                k = np.sqrt(snr_en) * math.sin(math.pi / 2)
                ber_lx = [math.erfc(i) for i in k]
                fig, ax = plt.subplots()  # 创建图实例
                ax.plot(snr_db, ber_lx, label='li xiang')  # 作1
                ax.plot(snr_db, ber_sj, label='shi ji')  # 作2
                ax.set_xlabel('SNR')  # 设置x轴名称 x label
                ax.set_yscale("log")
                ax.set_ylabel('BER')  # 设置y轴名称 y label
                ax.set_title('BER ver SNR')  # 设置图名为Simple Plot
                ax.legend()  # 自动检测要在图例中显示的元素，并且显示
                plt.savefig("BERverSNR.jpg")

                # 通过文件路径获取图片文件，并设置图片长宽为label控件的长宽
                jpg = QtGui.QPixmap('BERverSNR.jpg').scaled(self.label_image4.width(),
                                                            self.label_image4.height())
                # 在label控件上显示选择的图片
                self.label_image4.setPixmap(jpg)
            else:
                received_data = modulated_data
                # 创建4PSK解调器并解调信号
                demodulator = cpy.PSKModem(4)
                demodulated_data = demodulator.demodulate(received_data, 'hard')
                # 将解调后的比特流转换回数组图像数据
                demodulated_image_array = np.packbits(demodulated_data).astype(np.uint8)
                # 4PSK解调信号测试点
                # print('4PSK解调信号', demodulated_data)

            # 重构维度
            image_height, image_width = image.size
            demodulated_image_array.resize((image_width, image_height, 3))
            # 重构的数组转换回图像数据
            demodulated_image = Image.fromarray(demodulated_image_array)
            # 测试点
            # print(demodulated_image_array)
            print('原始图像尺寸', image.size)  # 原始图像尺寸
            print('重构图像尺寸', demodulated_image.size)  # 重构图像尺寸

            # 保存图像
            demodulated_image.save('4psk.jpg')

            # 通过文件路径获取图片文件，并设置图片长宽为label控件的长宽
            jpg = QtGui.QPixmap('4psk.jpg').scaled(self.label_image2.width(),
                                                   self.label_image2.height())
            # 在label控件上显示选择的图片
            self.label_image2.setPixmap(jpg)

        elif var == "8PSK":
            # 创建8PSK调制器
            modulator = cpy.PSKModem(8)
            modulated_data = modulator.modulate(bit_data)
            # 8PSK调制信号测试点
            print('8PSK调制信号', modulated_data)

            # 绘制星座图
            modulated_data_real = numpy.real(modulated_data)
            modulated_data_imag = numpy.imag(modulated_data)
            plt.scatter(modulated_data_real, modulated_data_imag, c='r', marker='*', s=50)
            plt.xticks(range(-2, 3, 1))
            plt.yticks(range(-2, 3, 1))
            plt.savefig("planet.jpg")
            # 通过文件路径获取图片文件，并设置图片长宽为label控件的长宽
            jpg = QtGui.QPixmap('planet.jpg').scaled(self.label_image5.width(),
                                                     self.label_image5.height())
            # 在label控件上显示选择的图片
            self.label_image5.setPixmap(jpg)

            # 信道
            var2 = self.comboBox_2.currentText()
            if var2 == "AWGN信道":
                received_data = awgn(modulated_data, 5)
                # 创建8PSK解调器并解调信号
                demodulator = cpy.PSKModem(8)
                demodulated_data = demodulator.demodulate(received_data, 'hard')
                # 将解调后的比特流转换回数组图像数据
                demodulated_image_array = np.packbits(demodulated_data).astype(np.uint8)
                # 8PSK解调信号测试点
                # print('8PSK解调信号', demodulated_data)

                # 计算实际误比特率和绘图保存显示
                ber_sj = []
                for i in range(-10, 5):
                    received_data = awgn(modulated_data, i)  # snr:i
                    demodulated_data = demodulator.demodulate(received_data, 'hard')
                    ber_sj += [calculate_ber(bit_data, demodulated_data)]
                # 理想误比特率计算
                snr_db = np.array([i for i in range(-10, 5)])
                snr_en = 10 ** (snr_db / 10)
                k = np.sqrt(snr_en) * math.sin(math.pi / 8)
                ber_lx = [math.erfc(i) for i in k]
                fig, ax = plt.subplots()  # 创建图实例
                ax.plot(snr_db, ber_lx, label='li xiang')  # 作1
                ax.plot(snr_db, ber_sj, label='shi ji')  # 作2
                ax.set_xlabel('SNR')  # 设置x轴名称 x label
                ax.set_yscale("log")
                ax.set_ylabel('BER')  # 设置y轴名称 y label
                ax.set_title('BER ver SNR')  # 设置图名为Simple Plot
                ax.legend()  # 自动检测要在图例中显示的元素，并且显示
                plt.savefig("BERverSNR.jpg")

                # 通过文件路径获取图片文件，并设置图片长宽为label控件的长宽
                jpg = QtGui.QPixmap('BERverSNR.jpg').scaled(self.label_image4.width(),
                                                            self.label_image4.height())
                # 在label控件上显示选择的图片
                self.label_image4.setPixmap(jpg)


            elif var2 == "平坦Rayleigh衰落信道":
                # 生成瑞利信道
                snr_db = 5
                received_data = dual_rayleigh_channel(modulated_data, snr_db)
                print(received_data)
                # 信道估计及调整图像
                channel_h = received_data / modulated_data
                received_data_change = received_data / channel_h
                print(received_data_change)
                demodulator = cpy.PSKModem(8)
                demodulated_data_change = demodulator.demodulate(received_data_change, 'hard')
                demodulated_image_array_change = np.packbits(demodulated_data_change).astype(np.uint8)
                image_height, image_width = image.size
                demodulated_image_array_change.resize((image_width, image_height, 3))
                demodulated_image_change = Image.fromarray(demodulated_image_array_change)
                demodulated_image_change.save('8psk_change.jpg')
                jpg = QtGui.QPixmap('8psk_change.jpg').scaled(self.label_image3.width(),
                                                              self.label_image3.height())
                self.label_image3.setPixmap(jpg)

                # 创建8PSK解调器并解调信号
                demodulator = cpy.PSKModem(8)
                demodulated_data = demodulator.demodulate(received_data, 'hard')
                # 将解调后的比特流转换回数组图像数据
                demodulated_image_array = np.packbits(demodulated_data).astype(np.uint8)
                # 8PSK解调信号测试点
                # print('8PSK解调信号', demodulated_data)

                # 计算实际误比特率和绘图保存显示
                ber_sj = []
                for i in range(-10, 5):
                    received_data = dual_rayleigh_channel(modulated_data, i)
                    demodulated_data = demodulator.demodulate(received_data, 'hard')
                    ber_sj += [calculate_ber(bit_data, demodulated_data)]
                # 理想误比特率计算
                snr_db = np.array([i for i in range(-10, 5)])
                snr_en = 10 ** (snr_db / 10)
                k = np.sqrt(snr_en) * math.sin(math.pi / 2)
                ber_lx = [math.erfc(i) for i in k]
                fig, ax = plt.subplots()  # 创建图实例
                ax.plot(snr_db, ber_lx, label='li xiang')  # 作1
                ax.plot(snr_db, ber_sj, label='shi ji')  # 作2
                ax.set_xlabel('SNR')  # 设置x轴名称 x label
                ax.set_yscale("log")
                ax.set_ylabel('BER')  # 设置y轴名称 y label
                ax.set_title('BER ver SNR')  # 设置图名为Simple Plot
                ax.legend()  # 自动检测要在图例中显示的元素，并且显示
                plt.savefig("BERverSNR.jpg")

                # 通过文件路径获取图片文件，并设置图片长宽为label控件的长宽
                jpg = QtGui.QPixmap('BERverSNR.jpg').scaled(self.label_image4.width(),
                                                            self.label_image4.height())
                # 在label控件上显示选择的图片
                self.label_image4.setPixmap(jpg)
            else:
                received_data = modulated_data
                # 创建8PSK解调器并解调信号
                demodulator = cpy.PSKModem(8)
                demodulated_data = demodulator.demodulate(received_data, 'hard')
                # 将解调后的比特流转换回数组图像数据
                demodulated_image_array = np.packbits(demodulated_data).astype(np.uint8)
                # 2PSK解调信号测试点
                # print('2PSK解调信号', demodulated_data)
            # 重构维度
            image_height, image_width = image.size
            demodulated_image_array.resize((image_width, image_height, 3))
            # 重构的数组转换回图像数据
            demodulated_image = Image.fromarray(demodulated_image_array)
            # 测试点
            # print(demodulated_image_array)
            print('原始图像尺寸', image.size)  # 原始图像尺寸
            print('重构图像尺寸', demodulated_image.size)  # 重构图像尺寸

            # 保存图像
            demodulated_image.save('8psk.jpg')

            # 通过文件路径获取图片文件，并设置图片长宽为label控件的长宽
            jpg = QtGui.QPixmap('8psk.jpg').scaled(self.label_image2.width(),
                                                   self.label_image2.height())
            # 在label控件上显示选择的图片
            self.label_image2.setPixmap(jpg)

        else:  # 用不着，多此一举
            print("impossible")
    # 添加方法


if __name__ == "__main__":
    # 自适应缩放大小
    QtCore.QCoreApplication.setAttribute(QtCore.Qt.AA_EnableHighDpiScaling)

    app = QtWidgets.QApplication(sys.argv)
    formObj = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(formObj)
    # 显示窗口
    formObj.show()
    # 进入循环等待操作相应
    sys.exit(app.exec_())
